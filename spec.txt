APP SPEC — "Save to Airtable"  (Current Implementation v2.0)

──────────────────────────────────
0. Goal
──────────────────────────────────
• Chrome browser extension with instant auto-save functionality.
• Capture Title, URL (editable), Tags → write to Airtable Units table.
• Smart content type detection and URL-based deduplication.
• Real-time change tracking with conditional updates.
• Form population from existing entries for easy editing.
• Button-only feedback system (no toast messages).

──────────────────────────────────
1. Airtable Contract
──────────────────────────────────
BASE: env AIRTABLE_BASE_ID
TABLE: Units (default) or env AIRTABLE_TABLE

Field         Type            Filled by app   Value
------------  --------------  -------------   -------------------------
Name          Single-line     yes             page title
Link          URL             yes             canonical URL
Tags          Multiple-select yes             array of tag strings
Status        Single-select   yes             "To do" (default for new entries)
Type          Single-select   yes             auto-detected content type
(all others)  —               no              untouched

Required Single-Select Options:
Status: "To do", "In progress", "Done"
Type: "Twitter thread", "Reddit thread", "Video", "Article"

──────────────────────────────────
2. Backend API
──────────────────────────────────
Platform: Vercel Serverless Functions
Env:
  AIRTABLE_PAT
  AIRTABLE_BASE_ID  
  AIRTABLE_TABLE=Units

POST /api/save  body:
{
  "url":   "<raw url>",
  "title": "<page title>",
  "tags":  ["tag1","tag2"],
  "source":"Extension",
  "forceUpdate": boolean (optional),
  "recordId": "recXXXXXX" (optional)
}

GET /api/tags
Returns: {"tags": ["tag1","tag2"...], "count": N}

Process (/api/save):
1. Canonicalise URL (canonicalize function)
   • lower-case scheme+host, drop trailing "/"
   • strip tracking params: utm_*, gclid, fbclid, yclid, mc_*, irclickid,
     spm, gbraid, wbraid, vero_*, ref, ref_*
   • YouTube-specific: list, index, t, start, end, feature, app, si, pp,
     ab_channel, source, kw, gws_rd, ei, ved, usg, sa, rlz, biw, bih
2. Dedup by URL (findByUrl function)
   GET Units?filterByFormula={Link}="canonical_url"
   if exists AND !forceUpdate → return 200 {duplicate:true,existingId,existingData:{title,tags}}
   if exists AND forceUpdate → update record, return 200 {duplicate:true,existingId}
3. Detect content type (detectContentType function)
   hostname-based: twitter.com/x.com → "Twitter thread"
                   reddit.com → "Reddit thread"
                   youtube.com/vimeo.com/twitch.tv/tiktok.com → "Video"
                   default → "Article"
4. If unique (create function)
   POST Units {Name, Link, Tags, Status:"To do", Type:detected_type}
   return 201 {duplicate:false,id}
Errors → 4xx/5xx {error,details}

──────────────────────────────────
3. Browser Extension  (MV3)
──────────────────────────────────
Tech Stack: React + TypeScript + Vite

manifest.json (auto-generated by Vite plugin):
{
  "manifest_version": 3,
  "name": "Save to Airtable",
  "version": "1.0.0",
  "permissions": ["storage","activeTab"],
  "host_permissions": ["https://*/*", "http://*/*"],
  "action": { "default_popup": "popup.html" },
  "background": { "service_worker": "background.js" }
}

popup.tsx (React component):
 Title  <textarea value={title} onChange={handleTitleChange} rows={2}>
 URL    <textarea value={url} onChange={handleUrlChange} rows={2}>
 Tags   <input value={tags} onChange={handleTagsChange} (with typeahead)>
                     [Save/Update Button] (no toast messages)

Behaviour:
• On mount (useEffect)
    – chrome.tabs.query → fill title + url from active tab
    – fetch("/api/tags") → populate availableTags for suggestions
    – performSave(url, title, []) → auto-save immediately
• On input change → checkForChanges() → set hasUnsavedChanges flag
• Button states (ONLY feedback mechanism):
    – isLoading: "Saving..." (gray, disabled)
    – !hasUnsavedChanges && savedRecordId: "✅ Saved" (green, disabled)
    – hasUnsavedChanges: "📝 Update Changes" (orange, enabled)
    – default: "Save to Airtable" (blue, enabled)
• performSave()
    POST /api/save
    duplicate with existingData → populate form fields with current values
    duplicate with forceUpdate → update existing record
    created → set savedRecordId, mark as saved
    error → keep in error state (no toast)
• Form population: When duplicate found, auto-fill title + tags from Airtable
• Tag suggestions: typeahead filtering from availableTags, comma-separated
• Update workflow: forceUpdate=true when hasUnsavedChanges && savedRecordId

Dependencies: react, react-dom (no Chakra UI, no axios, no toast library)

──────────────────────────────────
4. Development Tools
──────────────────────────────────
• dev.html: Development preview page with mocked Chrome APIs
  - Simulates chrome.tabs.query with sample data
  - Runs at http://localhost:5173/dev.html via `npm run dev`
• vite.dev.config.ts: Development server configuration
• Hot reload: Extension development with live preview

──────────────────────────────────
5. Repo / File Layout  
──────────────────────────────────
/api                     ← Vercel Serverless Functions
  save.ts                ← Main save endpoint with deduplication
  tags.ts                ← Dynamic tag suggestions endpoint  
  src/
    airtable.ts          ← Airtable API helpers (findByUrl, create, detectContentType)
    canonical.ts         ← URL canonicalization utilities

/extension               ← Chrome Extension (MV3)
  popup.tsx              ← React popup with auto-save
  popup.html             ← Extension popup entry point
  dev.html               ← Development preview page
  background.ts          ← Service worker
  vite.config.ts         ← Build configuration
  vite.dev.config.ts     ← Development server config
  utils/api.ts           ← API client utilities (getTags, postSave)

/backend                 ← Legacy backend (tests only)
  src/                   ← Shared utilities
  tests/
    canonical.test.ts    ← 8 URL test cases
    save.test.ts         ← API endpoint tests with mocking

/root
  spec.txt               ← This specification
  README.md              ← User documentation
  vercel.json            ← Vercel deployment config
  .github/workflows/ci.yml ← CI/CD pipeline

──────────────────────────────────
6. Testing & CI/CD
──────────────────────────────────
Test Framework: Vitest with Edge Runtime environment
Coverage:
• canonical.test.ts: 8 URL canonicalization scenarios
• save.test.ts: Complete API endpoint testing with mocked Airtable
• Deduplication tests: URL-based duplicate prevention
• Type detection tests: Smart content classification

Build Commands:
• Extension: cd extension && npm run build → extension/dist/
• Backend: vercel --prod (auto-deploys from /api directory)
• Dev server: cd extension && npm run dev → http://localhost:5173/dev.html

Deployment:
• Backend: Vercel Serverless Functions (auto-deploy from /api)
• Extension: Manual load from extension/dist/ in Chrome developer mode

──────────────────────────────────
7. Current Behavior & Acceptance Tests
──────────────────────────────────
✔ Auto-save on popup open → immediate save with "Saving..." button state
✔ Unique URL → button shows "✅ Saved" (green, disabled)
✔ Duplicate URL → form populated with existing title/tags, button shows "✅ Saved"
✔ Edit populated fields → button changes to "📝 Update Changes" (orange)
✔ Click update → saves changes, button returns to "✅ Saved" state
✔ Type detection → Twitter/Reddit/Video/Article auto-assigned based on hostname
✔ Tag suggestions → fetched fresh from Airtable, typeahead filtering
✔ Network error → button stays in loading state, no toast messages
✔ URL canonicalization → tracking + YouTube params removed, normalized
✔ Status field → "To do" automatically set for new entries
✔ YouTube deduplication → URLs with playlists/timestamps treated as same video
✔ Form population → existing entries auto-fill for easy editing
✔ Button-only feedback → no toast messages, all status in button

──────────────────────────────────
8. Current Implementation Notes
──────────────────────────────────
• Auto-save happens immediately on popup open (no debouncing)
• Form population from existing entries for easy editing
• No toast messages - all feedback through button states only
• No undo functionality (removed from original spec)
• No caching in chrome.storage (tags fetched fresh each time)
• Change tracking compares against original saved data
• Button disabled when no changes detected or when loading
• Uses native fetch API instead of axios
• No Chakra UI (custom inline styles)
• Development preview via dev.html with mocked Chrome APIs
• Vercel Serverless Functions instead of Edge Runtime
• URL-based deduplication instead of hash-based
• Enhanced YouTube URL canonicalization (playlists, timestamps)
• Two-phase save: populate first, update on demand with forceUpdate flag
